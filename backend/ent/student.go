// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mocku/backend/ent/careers"
	"mocku/backend/ent/student"
	"mocku/backend/ent/users"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Student is the model entity for the Student schema.
type Student struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IdentityCard holds the value of the "identity_card" field.
	IdentityCard string `json:"identity_card,omitempty"`
	// BirthDate holds the value of the "birth_date" field.
	BirthDate time.Time `json:"birth_date,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// District holds the value of the "district" field.
	District string `json:"district,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// PostalCode holds the value of the "postal_code" field.
	PostalCode int `json:"postal_code,omitempty"`
	// CreditUnitsAccumulated holds the value of the "credit_units_accumulated" field.
	CreditUnitsAccumulated int `json:"credit_units_accumulated,omitempty"`
	// TotalAverage holds the value of the "total_average" field.
	TotalAverage float64 `json:"total_average,omitempty"`
	// Semester holds the value of the "semester" field.
	Semester int `json:"semester,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StudentQuery when eager-loading is set.
	Edges          StudentEdges `json:"edges"`
	student_user   *int
	student_career *int
	selectValues   sql.SelectValues
}

// StudentEdges holds the relations/edges for other nodes in the graph.
type StudentEdges struct {
	// User holds the value of the user edge.
	User *Users `json:"user,omitempty"`
	// Notes holds the value of the notes edge.
	Notes []*Note `json:"notes,omitempty"`
	// Payments holds the value of the payments edge.
	Payments []*Payment `json:"payments,omitempty"`
	// Career holds the value of the career edge.
	Career *Careers `json:"career,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudentEdges) UserOrErr() (*Users, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// NotesOrErr returns the Notes value or an error if the edge
// was not loaded in eager-loading.
func (e StudentEdges) NotesOrErr() ([]*Note, error) {
	if e.loadedTypes[1] {
		return e.Notes, nil
	}
	return nil, &NotLoadedError{edge: "notes"}
}

// PaymentsOrErr returns the Payments value or an error if the edge
// was not loaded in eager-loading.
func (e StudentEdges) PaymentsOrErr() ([]*Payment, error) {
	if e.loadedTypes[2] {
		return e.Payments, nil
	}
	return nil, &NotLoadedError{edge: "payments"}
}

// CareerOrErr returns the Career value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudentEdges) CareerOrErr() (*Careers, error) {
	if e.Career != nil {
		return e.Career, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: careers.Label}
	}
	return nil, &NotLoadedError{edge: "career"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Student) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case student.FieldTotalAverage:
			values[i] = new(sql.NullFloat64)
		case student.FieldID, student.FieldPostalCode, student.FieldCreditUnitsAccumulated, student.FieldSemester:
			values[i] = new(sql.NullInt64)
		case student.FieldIdentityCard, student.FieldPhone, student.FieldAddress, student.FieldDistrict, student.FieldCity:
			values[i] = new(sql.NullString)
		case student.FieldBirthDate:
			values[i] = new(sql.NullTime)
		case student.ForeignKeys[0]: // student_user
			values[i] = new(sql.NullInt64)
		case student.ForeignKeys[1]: // student_career
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Student fields.
func (s *Student) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case student.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case student.FieldIdentityCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identity_card", values[i])
			} else if value.Valid {
				s.IdentityCard = value.String
			}
		case student.FieldBirthDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birth_date", values[i])
			} else if value.Valid {
				s.BirthDate = value.Time
			}
		case student.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				s.Phone = value.String
			}
		case student.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				s.Address = value.String
			}
		case student.FieldDistrict:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field district", values[i])
			} else if value.Valid {
				s.District = value.String
			}
		case student.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				s.City = value.String
			}
		case student.FieldPostalCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field postal_code", values[i])
			} else if value.Valid {
				s.PostalCode = int(value.Int64)
			}
		case student.FieldCreditUnitsAccumulated:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field credit_units_accumulated", values[i])
			} else if value.Valid {
				s.CreditUnitsAccumulated = int(value.Int64)
			}
		case student.FieldTotalAverage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_average", values[i])
			} else if value.Valid {
				s.TotalAverage = value.Float64
			}
		case student.FieldSemester:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field semester", values[i])
			} else if value.Valid {
				s.Semester = int(value.Int64)
			}
		case student.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field student_user", value)
			} else if value.Valid {
				s.student_user = new(int)
				*s.student_user = int(value.Int64)
			}
		case student.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field student_career", value)
			} else if value.Valid {
				s.student_career = new(int)
				*s.student_career = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Student.
// This includes values selected through modifiers, order, etc.
func (s *Student) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Student entity.
func (s *Student) QueryUser() *UsersQuery {
	return NewStudentClient(s.config).QueryUser(s)
}

// QueryNotes queries the "notes" edge of the Student entity.
func (s *Student) QueryNotes() *NoteQuery {
	return NewStudentClient(s.config).QueryNotes(s)
}

// QueryPayments queries the "payments" edge of the Student entity.
func (s *Student) QueryPayments() *PaymentQuery {
	return NewStudentClient(s.config).QueryPayments(s)
}

// QueryCareer queries the "career" edge of the Student entity.
func (s *Student) QueryCareer() *CareersQuery {
	return NewStudentClient(s.config).QueryCareer(s)
}

// Update returns a builder for updating this Student.
// Note that you need to call Student.Unwrap() before calling this method if this Student
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Student) Update() *StudentUpdateOne {
	return NewStudentClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Student entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Student) Unwrap() *Student {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Student is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Student) String() string {
	var builder strings.Builder
	builder.WriteString("Student(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("identity_card=")
	builder.WriteString(s.IdentityCard)
	builder.WriteString(", ")
	builder.WriteString("birth_date=")
	builder.WriteString(s.BirthDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(s.Phone)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(s.Address)
	builder.WriteString(", ")
	builder.WriteString("district=")
	builder.WriteString(s.District)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(s.City)
	builder.WriteString(", ")
	builder.WriteString("postal_code=")
	builder.WriteString(fmt.Sprintf("%v", s.PostalCode))
	builder.WriteString(", ")
	builder.WriteString("credit_units_accumulated=")
	builder.WriteString(fmt.Sprintf("%v", s.CreditUnitsAccumulated))
	builder.WriteString(", ")
	builder.WriteString("total_average=")
	builder.WriteString(fmt.Sprintf("%v", s.TotalAverage))
	builder.WriteString(", ")
	builder.WriteString("semester=")
	builder.WriteString(fmt.Sprintf("%v", s.Semester))
	builder.WriteByte(')')
	return builder.String()
}

// Students is a parsable slice of Student.
type Students []*Student
