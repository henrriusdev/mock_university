// Code generated by ent, DO NOT EDIT.

package student

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the student type in the database.
	Label = "student"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIdentityCard holds the string denoting the identity_card field in the database.
	FieldIdentityCard = "identity_card"
	// FieldBirthDate holds the string denoting the birth_date field in the database.
	FieldBirthDate = "birth_date"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldDistrict holds the string denoting the district field in the database.
	FieldDistrict = "district"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldPostalCode holds the string denoting the postal_code field in the database.
	FieldPostalCode = "postal_code"
	// FieldCreditUnitsAccumulated holds the string denoting the credit_units_accumulated field in the database.
	FieldCreditUnitsAccumulated = "credit_units_accumulated"
	// FieldTotalAverage holds the string denoting the total_average field in the database.
	FieldTotalAverage = "total_average"
	// FieldSemester holds the string denoting the semester field in the database.
	FieldSemester = "semester"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeNotes holds the string denoting the notes edge name in mutations.
	EdgeNotes = "notes"
	// EdgePayments holds the string denoting the payments edge name in mutations.
	EdgePayments = "payments"
	// EdgeCareer holds the string denoting the career edge name in mutations.
	EdgeCareer = "career"
	// Table holds the table name of the student in the database.
	Table = "students"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "students"
	// UserInverseTable is the table name for the Users entity.
	// It exists in this package in order to avoid circular dependency with the "users" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "student_user"
	// NotesTable is the table that holds the notes relation/edge.
	NotesTable = "notes"
	// NotesInverseTable is the table name for the Note entity.
	// It exists in this package in order to avoid circular dependency with the "note" package.
	NotesInverseTable = "notes"
	// NotesColumn is the table column denoting the notes relation/edge.
	NotesColumn = "note_student"
	// PaymentsTable is the table that holds the payments relation/edge.
	PaymentsTable = "payments"
	// PaymentsInverseTable is the table name for the Payment entity.
	// It exists in this package in order to avoid circular dependency with the "payment" package.
	PaymentsInverseTable = "payments"
	// PaymentsColumn is the table column denoting the payments relation/edge.
	PaymentsColumn = "payment_student"
	// CareerTable is the table that holds the career relation/edge.
	CareerTable = "students"
	// CareerInverseTable is the table name for the Careers entity.
	// It exists in this package in order to avoid circular dependency with the "careers" package.
	CareerInverseTable = "careers"
	// CareerColumn is the table column denoting the career relation/edge.
	CareerColumn = "student_career"
)

// Columns holds all SQL columns for student fields.
var Columns = []string{
	FieldID,
	FieldIdentityCard,
	FieldBirthDate,
	FieldPhone,
	FieldAddress,
	FieldDistrict,
	FieldCity,
	FieldPostalCode,
	FieldCreditUnitsAccumulated,
	FieldTotalAverage,
	FieldSemester,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "students"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"student_user",
	"student_career",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IdentityCardValidator is a validator for the "identity_card" field. It is called by the builders before save.
	IdentityCardValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
	// DistrictValidator is a validator for the "district" field. It is called by the builders before save.
	DistrictValidator func(string) error
	// CityValidator is a validator for the "city" field. It is called by the builders before save.
	CityValidator func(string) error
	// PostalCodeValidator is a validator for the "postal_code" field. It is called by the builders before save.
	PostalCodeValidator func(int) error
	// CreditUnitsAccumulatedValidator is a validator for the "credit_units_accumulated" field. It is called by the builders before save.
	CreditUnitsAccumulatedValidator func(int) error
	// TotalAverageValidator is a validator for the "total_average" field. It is called by the builders before save.
	TotalAverageValidator func(float64) error
	// SemesterValidator is a validator for the "semester" field. It is called by the builders before save.
	SemesterValidator func(int) error
)

// OrderOption defines the ordering options for the Student queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIdentityCard orders the results by the identity_card field.
func ByIdentityCard(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentityCard, opts...).ToFunc()
}

// ByBirthDate orders the results by the birth_date field.
func ByBirthDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthDate, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByDistrict orders the results by the district field.
func ByDistrict(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistrict, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByPostalCode orders the results by the postal_code field.
func ByPostalCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostalCode, opts...).ToFunc()
}

// ByCreditUnitsAccumulated orders the results by the credit_units_accumulated field.
func ByCreditUnitsAccumulated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreditUnitsAccumulated, opts...).ToFunc()
}

// ByTotalAverage orders the results by the total_average field.
func ByTotalAverage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAverage, opts...).ToFunc()
}

// BySemester orders the results by the semester field.
func BySemester(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSemester, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotesCount orders the results by notes count.
func ByNotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotesStep(), opts...)
	}
}

// ByNotes orders the results by notes terms.
func ByNotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPaymentsCount orders the results by payments count.
func ByPaymentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPaymentsStep(), opts...)
	}
}

// ByPayments orders the results by payments terms.
func ByPayments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCareerField orders the results by career field.
func ByCareerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCareerStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newNotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, NotesTable, NotesColumn),
	)
}
func newPaymentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PaymentsTable, PaymentsColumn),
	)
}
func newCareerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CareerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CareerTable, CareerColumn),
	)
}
