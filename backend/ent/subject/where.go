// Code generated by ent, DO NOT EDIT.

package subject

import (
	"mocku/backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Subject {
	return predicate.Subject(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Subject {
	return predicate.Subject(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Subject {
	return predicate.Subject(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Subject {
	return predicate.Subject(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Subject {
	return predicate.Subject(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Subject {
	return predicate.Subject(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Subject {
	return predicate.Subject(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldDescription, v))
}

// CreditUnits applies equality check predicate on the "credit_units" field. It's identical to CreditUnitsEQ.
func CreditUnits(v int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldCreditUnits, v))
}

// Semester applies equality check predicate on the "semester" field. It's identical to SemesterEQ.
func Semester(v int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldSemester, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldCode, v))
}

// PracticeHours applies equality check predicate on the "practice_hours" field. It's identical to PracticeHoursEQ.
func PracticeHours(v int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldPracticeHours, v))
}

// TheoryHours applies equality check predicate on the "theory_hours" field. It's identical to TheoryHoursEQ.
func TheoryHours(v int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldTheoryHours, v))
}

// LabHours applies equality check predicate on the "lab_hours" field. It's identical to LabHoursEQ.
func LabHours(v int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldLabHours, v))
}

// TotalHours applies equality check predicate on the "total_hours" field. It's identical to TotalHoursEQ.
func TotalHours(v int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldTotalHours, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Subject {
	return predicate.Subject(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Subject {
	return predicate.Subject(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Subject {
	return predicate.Subject(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Subject {
	return predicate.Subject(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Subject {
	return predicate.Subject(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Subject {
	return predicate.Subject(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Subject {
	return predicate.Subject(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Subject {
	return predicate.Subject(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Subject {
	return predicate.Subject(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Subject {
	return predicate.Subject(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Subject {
	return predicate.Subject(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Subject {
	return predicate.Subject(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Subject {
	return predicate.Subject(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Subject {
	return predicate.Subject(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Subject {
	return predicate.Subject(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Subject {
	return predicate.Subject(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Subject {
	return predicate.Subject(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Subject {
	return predicate.Subject(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Subject {
	return predicate.Subject(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Subject {
	return predicate.Subject(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Subject {
	return predicate.Subject(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Subject {
	return predicate.Subject(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Subject {
	return predicate.Subject(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Subject {
	return predicate.Subject(sql.FieldContainsFold(FieldDescription, v))
}

// CreditUnitsEQ applies the EQ predicate on the "credit_units" field.
func CreditUnitsEQ(v int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldCreditUnits, v))
}

// CreditUnitsNEQ applies the NEQ predicate on the "credit_units" field.
func CreditUnitsNEQ(v int) predicate.Subject {
	return predicate.Subject(sql.FieldNEQ(FieldCreditUnits, v))
}

// CreditUnitsIn applies the In predicate on the "credit_units" field.
func CreditUnitsIn(vs ...int) predicate.Subject {
	return predicate.Subject(sql.FieldIn(FieldCreditUnits, vs...))
}

// CreditUnitsNotIn applies the NotIn predicate on the "credit_units" field.
func CreditUnitsNotIn(vs ...int) predicate.Subject {
	return predicate.Subject(sql.FieldNotIn(FieldCreditUnits, vs...))
}

// CreditUnitsGT applies the GT predicate on the "credit_units" field.
func CreditUnitsGT(v int) predicate.Subject {
	return predicate.Subject(sql.FieldGT(FieldCreditUnits, v))
}

// CreditUnitsGTE applies the GTE predicate on the "credit_units" field.
func CreditUnitsGTE(v int) predicate.Subject {
	return predicate.Subject(sql.FieldGTE(FieldCreditUnits, v))
}

// CreditUnitsLT applies the LT predicate on the "credit_units" field.
func CreditUnitsLT(v int) predicate.Subject {
	return predicate.Subject(sql.FieldLT(FieldCreditUnits, v))
}

// CreditUnitsLTE applies the LTE predicate on the "credit_units" field.
func CreditUnitsLTE(v int) predicate.Subject {
	return predicate.Subject(sql.FieldLTE(FieldCreditUnits, v))
}

// SemesterEQ applies the EQ predicate on the "semester" field.
func SemesterEQ(v int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldSemester, v))
}

// SemesterNEQ applies the NEQ predicate on the "semester" field.
func SemesterNEQ(v int) predicate.Subject {
	return predicate.Subject(sql.FieldNEQ(FieldSemester, v))
}

// SemesterIn applies the In predicate on the "semester" field.
func SemesterIn(vs ...int) predicate.Subject {
	return predicate.Subject(sql.FieldIn(FieldSemester, vs...))
}

// SemesterNotIn applies the NotIn predicate on the "semester" field.
func SemesterNotIn(vs ...int) predicate.Subject {
	return predicate.Subject(sql.FieldNotIn(FieldSemester, vs...))
}

// SemesterGT applies the GT predicate on the "semester" field.
func SemesterGT(v int) predicate.Subject {
	return predicate.Subject(sql.FieldGT(FieldSemester, v))
}

// SemesterGTE applies the GTE predicate on the "semester" field.
func SemesterGTE(v int) predicate.Subject {
	return predicate.Subject(sql.FieldGTE(FieldSemester, v))
}

// SemesterLT applies the LT predicate on the "semester" field.
func SemesterLT(v int) predicate.Subject {
	return predicate.Subject(sql.FieldLT(FieldSemester, v))
}

// SemesterLTE applies the LTE predicate on the "semester" field.
func SemesterLTE(v int) predicate.Subject {
	return predicate.Subject(sql.FieldLTE(FieldSemester, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Subject {
	return predicate.Subject(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Subject {
	return predicate.Subject(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Subject {
	return predicate.Subject(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Subject {
	return predicate.Subject(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Subject {
	return predicate.Subject(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Subject {
	return predicate.Subject(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Subject {
	return predicate.Subject(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Subject {
	return predicate.Subject(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Subject {
	return predicate.Subject(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Subject {
	return predicate.Subject(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Subject {
	return predicate.Subject(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Subject {
	return predicate.Subject(sql.FieldContainsFold(FieldCode, v))
}

// PracticeHoursEQ applies the EQ predicate on the "practice_hours" field.
func PracticeHoursEQ(v int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldPracticeHours, v))
}

// PracticeHoursNEQ applies the NEQ predicate on the "practice_hours" field.
func PracticeHoursNEQ(v int) predicate.Subject {
	return predicate.Subject(sql.FieldNEQ(FieldPracticeHours, v))
}

// PracticeHoursIn applies the In predicate on the "practice_hours" field.
func PracticeHoursIn(vs ...int) predicate.Subject {
	return predicate.Subject(sql.FieldIn(FieldPracticeHours, vs...))
}

// PracticeHoursNotIn applies the NotIn predicate on the "practice_hours" field.
func PracticeHoursNotIn(vs ...int) predicate.Subject {
	return predicate.Subject(sql.FieldNotIn(FieldPracticeHours, vs...))
}

// PracticeHoursGT applies the GT predicate on the "practice_hours" field.
func PracticeHoursGT(v int) predicate.Subject {
	return predicate.Subject(sql.FieldGT(FieldPracticeHours, v))
}

// PracticeHoursGTE applies the GTE predicate on the "practice_hours" field.
func PracticeHoursGTE(v int) predicate.Subject {
	return predicate.Subject(sql.FieldGTE(FieldPracticeHours, v))
}

// PracticeHoursLT applies the LT predicate on the "practice_hours" field.
func PracticeHoursLT(v int) predicate.Subject {
	return predicate.Subject(sql.FieldLT(FieldPracticeHours, v))
}

// PracticeHoursLTE applies the LTE predicate on the "practice_hours" field.
func PracticeHoursLTE(v int) predicate.Subject {
	return predicate.Subject(sql.FieldLTE(FieldPracticeHours, v))
}

// TheoryHoursEQ applies the EQ predicate on the "theory_hours" field.
func TheoryHoursEQ(v int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldTheoryHours, v))
}

// TheoryHoursNEQ applies the NEQ predicate on the "theory_hours" field.
func TheoryHoursNEQ(v int) predicate.Subject {
	return predicate.Subject(sql.FieldNEQ(FieldTheoryHours, v))
}

// TheoryHoursIn applies the In predicate on the "theory_hours" field.
func TheoryHoursIn(vs ...int) predicate.Subject {
	return predicate.Subject(sql.FieldIn(FieldTheoryHours, vs...))
}

// TheoryHoursNotIn applies the NotIn predicate on the "theory_hours" field.
func TheoryHoursNotIn(vs ...int) predicate.Subject {
	return predicate.Subject(sql.FieldNotIn(FieldTheoryHours, vs...))
}

// TheoryHoursGT applies the GT predicate on the "theory_hours" field.
func TheoryHoursGT(v int) predicate.Subject {
	return predicate.Subject(sql.FieldGT(FieldTheoryHours, v))
}

// TheoryHoursGTE applies the GTE predicate on the "theory_hours" field.
func TheoryHoursGTE(v int) predicate.Subject {
	return predicate.Subject(sql.FieldGTE(FieldTheoryHours, v))
}

// TheoryHoursLT applies the LT predicate on the "theory_hours" field.
func TheoryHoursLT(v int) predicate.Subject {
	return predicate.Subject(sql.FieldLT(FieldTheoryHours, v))
}

// TheoryHoursLTE applies the LTE predicate on the "theory_hours" field.
func TheoryHoursLTE(v int) predicate.Subject {
	return predicate.Subject(sql.FieldLTE(FieldTheoryHours, v))
}

// LabHoursEQ applies the EQ predicate on the "lab_hours" field.
func LabHoursEQ(v int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldLabHours, v))
}

// LabHoursNEQ applies the NEQ predicate on the "lab_hours" field.
func LabHoursNEQ(v int) predicate.Subject {
	return predicate.Subject(sql.FieldNEQ(FieldLabHours, v))
}

// LabHoursIn applies the In predicate on the "lab_hours" field.
func LabHoursIn(vs ...int) predicate.Subject {
	return predicate.Subject(sql.FieldIn(FieldLabHours, vs...))
}

// LabHoursNotIn applies the NotIn predicate on the "lab_hours" field.
func LabHoursNotIn(vs ...int) predicate.Subject {
	return predicate.Subject(sql.FieldNotIn(FieldLabHours, vs...))
}

// LabHoursGT applies the GT predicate on the "lab_hours" field.
func LabHoursGT(v int) predicate.Subject {
	return predicate.Subject(sql.FieldGT(FieldLabHours, v))
}

// LabHoursGTE applies the GTE predicate on the "lab_hours" field.
func LabHoursGTE(v int) predicate.Subject {
	return predicate.Subject(sql.FieldGTE(FieldLabHours, v))
}

// LabHoursLT applies the LT predicate on the "lab_hours" field.
func LabHoursLT(v int) predicate.Subject {
	return predicate.Subject(sql.FieldLT(FieldLabHours, v))
}

// LabHoursLTE applies the LTE predicate on the "lab_hours" field.
func LabHoursLTE(v int) predicate.Subject {
	return predicate.Subject(sql.FieldLTE(FieldLabHours, v))
}

// TotalHoursEQ applies the EQ predicate on the "total_hours" field.
func TotalHoursEQ(v int) predicate.Subject {
	return predicate.Subject(sql.FieldEQ(FieldTotalHours, v))
}

// TotalHoursNEQ applies the NEQ predicate on the "total_hours" field.
func TotalHoursNEQ(v int) predicate.Subject {
	return predicate.Subject(sql.FieldNEQ(FieldTotalHours, v))
}

// TotalHoursIn applies the In predicate on the "total_hours" field.
func TotalHoursIn(vs ...int) predicate.Subject {
	return predicate.Subject(sql.FieldIn(FieldTotalHours, vs...))
}

// TotalHoursNotIn applies the NotIn predicate on the "total_hours" field.
func TotalHoursNotIn(vs ...int) predicate.Subject {
	return predicate.Subject(sql.FieldNotIn(FieldTotalHours, vs...))
}

// TotalHoursGT applies the GT predicate on the "total_hours" field.
func TotalHoursGT(v int) predicate.Subject {
	return predicate.Subject(sql.FieldGT(FieldTotalHours, v))
}

// TotalHoursGTE applies the GTE predicate on the "total_hours" field.
func TotalHoursGTE(v int) predicate.Subject {
	return predicate.Subject(sql.FieldGTE(FieldTotalHours, v))
}

// TotalHoursLT applies the LT predicate on the "total_hours" field.
func TotalHoursLT(v int) predicate.Subject {
	return predicate.Subject(sql.FieldLT(FieldTotalHours, v))
}

// TotalHoursLTE applies the LTE predicate on the "total_hours" field.
func TotalHoursLTE(v int) predicate.Subject {
	return predicate.Subject(sql.FieldLTE(FieldTotalHours, v))
}

// ClassScheduleIsNil applies the IsNil predicate on the "class_schedule" field.
func ClassScheduleIsNil() predicate.Subject {
	return predicate.Subject(sql.FieldIsNull(FieldClassSchedule))
}

// ClassScheduleNotNil applies the NotNil predicate on the "class_schedule" field.
func ClassScheduleNotNil() predicate.Subject {
	return predicate.Subject(sql.FieldNotNull(FieldClassSchedule))
}

// HasProfessor applies the HasEdge predicate on the "professor" edge.
func HasProfessor() predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProfessorTable, ProfessorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfessorWith applies the HasEdge predicate on the "professor" edge with a given conditions (other predicates).
func HasProfessorWith(preds ...predicate.Professor) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		step := newProfessorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCareer applies the HasEdge predicate on the "career" edge.
func HasCareer() predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CareerTable, CareerPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCareerWith applies the HasEdge predicate on the "career" edge with a given conditions (other predicates).
func HasCareerWith(preds ...predicate.Careers) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		step := newCareerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotes applies the HasEdge predicate on the "notes" edge.
func HasNotes() predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, NotesTable, NotesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotesWith applies the HasEdge predicate on the "notes" edge with a given conditions (other predicates).
func HasNotesWith(preds ...predicate.Note) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		step := newNotesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNextSubject applies the HasEdge predicate on the "next_subject" edge.
func HasNextSubject() predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, NextSubjectTable, NextSubjectPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNextSubjectWith applies the HasEdge predicate on the "next_subject" edge with a given conditions (other predicates).
func HasNextSubjectWith(preds ...predicate.Subject) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		step := newNextSubjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrerequisites applies the HasEdge predicate on the "prerequisites" edge.
func HasPrerequisites() predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PrerequisitesTable, PrerequisitesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrerequisitesWith applies the HasEdge predicate on the "prerequisites" edge with a given conditions (other predicates).
func HasPrerequisitesWith(preds ...predicate.Subject) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		step := newPrerequisitesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subject) predicate.Subject {
	return predicate.Subject(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subject) predicate.Subject {
	return predicate.Subject(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subject) predicate.Subject {
	return predicate.Subject(sql.NotPredicates(p))
}
